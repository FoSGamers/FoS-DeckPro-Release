# deckforge_json_deckbuilder.py

import json
import random
import subprocess
from typing import List, Dict

# Load JSON inventory
def load_inventory(json_path: str) -> List[Dict]:
    with open(json_path, 'r', encoding='utf-8') as file:
        inventory = json.load(file)
    return inventory

# Filter by format legality
def filter_legal_cards(cards: List[Dict], format_key: str = 'legal_pauper') -> List[Dict]:
    return [card for card in cards if card.get(format_key) == 'legal']

# Synergy analysis using smarter-than-human logic
def analyze_synergy(cards: List[Dict]) -> Dict[str, float]:
    synergy_scores = {}
    for card in cards:
        text = card.get("oracle_text", "").lower()
        score = 0
        if "draw" in text:
            score += 2.0
        if "damage" in text or "counter" in text:
            score += 1.5
        if "haste" in text or "first strike" in text:
            score += 1.2
        if "mana" in text or "ramp" in text:
            score += 1.0
        if "lifelink" in text or "gain life" in text:
            score += 0.8
        synergy_scores[card["Name"]] = score
    return synergy_scores

# Enhanced deck generator

def generate_pauper_deck(cards: List[Dict]) -> List[Dict]:
    synergy_scores = analyze_synergy(cards)
    sorted_cards = sorted(cards, key=lambda c: synergy_scores.get(c['Name'], 0), reverse=True)
    deck = []
    deck += [card for card in sorted_cards if 'Creature' in card['type_line']][:24]
    deck += [card for card in sorted_cards if 'Instant' in card['type_line'] or 'Sorcery' in card['type_line']][:12]
    deck += [card for card in sorted_cards if 'Land' in card['type_line']][:20]
    # Pad with synergy-prioritized cards
    if len(deck) < 60:
        remaining = [c for c in sorted_cards if c not in deck]
        deck += random.sample(remaining, min(60 - len(deck), len(remaining)))
    return deck[:60]

# Display deck summary
def summarize_deck(deck: List[Dict]) -> None:
    print("Deck Summary (Name | Type | CMC | Mana Cost):")
    for card in deck:
        print(f"{card['Name']} | {card['type_line']} | CMC: {card['cmc']} | Cost: {card['mana_cost']}")

# Export deck to Forge format
def export_to_forge(deck: List[Dict], path: str):
    with open(path, 'w') as f:
        f.write("[metadata]\nName=AutoGenerated Pauper Deck\n\n[main]\n")
        for card in deck:
            f.write(f"1 {card['Name']}\n")

# Run Forge simulation
def simulate_with_forge(deck_path: str, forge_path: str):
    try:
        subprocess.run([forge_path, "sim", deck_path], check=True)
    except Exception as e:
        print(f"Forge Simulation Error: {e}")

# Main runner
def main():
    inventory = load_inventory('New_For_Sale.json')
    pauper_cards = filter_legal_cards(inventory, 'legal_pauper')
    if not pauper_cards:
        print("No legal Pauper cards found in inventory.")
        return
    deck = generate_pauper_deck(pauper_cards)
    summarize_deck(deck)
    export_to_forge(deck, 'autodeck.dck')
    # Optionally simulate
    # simulate_with_forge('autodeck.dck', '/path/to/forge.sh')

if __name__ == '__main__':
    main()
