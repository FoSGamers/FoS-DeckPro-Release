2025-05-10 18:06:26,537 - INFO - Logging initialized. Log file: logs/manabox_enhancer_20250510_180626.log
2025-05-10 18:06:35,204 - INFO - Attempting to load JSON file: /Users/jgleason/Development/ManaBox_Enhancer/Singles_for_Sale.json
2025-05-10 18:06:35,207 - DEBUG - Raw JSON data length: 1181636 characters
2025-05-10 18:06:35,207 - DEBUG - First 100 characters of JSON: [
  {
    "Name": "Paradise Plume",
    "Set code": "TSR",
    "Set name": "Time Spiral Remastered",
2025-05-10 18:06:35,214 - INFO - Successfully loaded 1165 cards
2025-05-10 18:06:35,214 - DEBUG - First card structure: {
  "Name": "Paradise Plume",
  "Set code": "TSR",
  "Set name": "Time Spiral Remastered",
  "Collector number": "271",
  "Foil": "normal",
  "Rarity": "uncommon",
  "Quantity": 1,
  "ManaBox ID": 57815,
  "Scryfall ID": "b794e97e-8b2c-4bde-8028-4348de5aec83",
  "Purchase price": 0.25,
  "Misprint": false,
  "Altered": false,
  "Condition": "near_mint",
  "Language": "en",
  "Purchase price currency": "USD",
  "type_line": "Artifact",
  "mana_cost": "{4}",
  "colors": "",
  "color_identity": "",
  "oracle_text": "As this artifact enters, choose a color.\nWhenever a player casts a spell of the chosen color, you may gain 1 life.\n{T}: Add one mana of the chosen color.",
  "legal_commander": "legal",
  "legal_pauper": "not_legal",
  "image_url": "https://cards.scryfall.io/normal/front/b/7/b794e97e-8b2c-4bde-8028-4348de5aec83.jpg?1619399015",
  "_original_order": 0,
  "quantity": "",
  "cmc": 4.0
}
2025-05-10 18:06:35,215 - ERROR - Unexpected error loading JSON file: string indices must be integers, not 'str'
2025-05-10 18:06:35,215 - ERROR - Full error details: TypeError
2025-05-10 18:06:35,215 - ERROR - Traceback (most recent call last):
  File "/Users/jgleason/Development/ManaBox_Enhancer/manabox_enhancer_gui.py", line 224, in load_existing_json
    self.update_card_display_columns(self.existing_data)
  File "/Users/jgleason/Development/ManaBox_Enhancer/manabox_enhancer_gui.py", line 465, in update_card_display_columns
    self.card_display["columns"] = [col["id"] for col in self.column_config["columns"] if col.get("visible", True)]
    for col in self.card_display["columns"]:
        self.card_display.heading(col, text=col["display"])
TypeError: string indices must be integers, not 'str'

def update_card_display_columns(self, data):
    if not data:
        return
    # Only include visible columns
    visible_cols = [col for col in self.column_config["columns"] if col.get("visible", True)]
    col_ids = [col["id"] for col in visible_cols]
    self.card_display["columns"] = col_ids
    for col in visible_cols:
        self.card_display.heading(col["id"], text=col["display"])
        width = col.get("width", 100)
        self.card_display.column(col["id"], width=width, minwidth=50, stretch=False)

def set_legendary_flag(self, card):
    type_line = card.get("type_line", "") or card.get("Type", "")
    card["Legendary"] = "Yes" if "Legendary" in type_line else "No"

def load_existing_json(self):
    # ... your existing code ...
    if self.existing_json_file:
        try:
            # ... your existing code ...
            self.existing_data = json.loads(raw_data)
            if not isinstance(self.existing_data, list):
                raise ValueError("JSON data must be a list of cards")
            # --- AUTO-APPLY LEGENDARY FLAG ---
            for card in self.existing_data:
                self.set_legendary_flag(card)
            # ... rest of your code ...

def _process_file_thread(self):
    # ... your existing code ...
    for i, (_, row) in enumerate(df.iterrows()):
        # ... your existing code ...
        self.set_legendary_flag(card_data)
        self.new_data.append(card_data)
        # ... rest of your code ...

def compare_and_merge(self):
    # ... your existing code ...
    for card in self.merged_data:
        self.set_legendary_flag(card)
    self.display_cards()
    self.status_label.config(text="Merge complete!")

def fetch_scryfall_data(self, scryfall_id):
    # ... your existing code ...
    card_data = {
        # ... fields ...
    }
    self.set_legendary_flag(card_data)
    return card_data

