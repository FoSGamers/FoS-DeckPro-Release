# FoSLauncher Project Documentation

## Core Application Overview
FoSLauncher is a modular GUI application built with CustomTkinter that provides a unified interface for managing various streaming and content creation tools. It follows a pay-per-module business model, allowing users to purchase only the features they need.

### Key Features
1. **Single Access Control**
   - Access code entry through GUI dialog
   - Master code for full access
   - Module-specific access codes
   - Persistent access settings

2. **Module Management**
   - Dynamic module discovery
   - Visual module status display
   - One-click module launching
   - Access verification

3. **User Interface**
   - Modern CustomTkinter design
   - Clear module status indicators
   - Intuitive navigation
   - Error feedback
   - Responsive layout
   - Access code dialogs

## Available Modules

### 1. Chatbot+ (Premium)
- **Description**: Unified chat interface with YouTube integration
- **Features**:
  * Real-time message handling
  * YouTube chat integration
  * Command processing
  * Status monitoring
- **Access**: Requires access code
- **Status**: Working

### 2. ChatSplitter (Free)
- **Description**: Split chat messages into different windows
- **Features**:
  * Message splitting
  * Basic export functionality
  * User-friendly interface
- **Access**: No access code required
- **Status**: Working

### 3. YouTube Login (Premium)
- **Description**: Authenticate with YouTube API
- **Features**:
  * OAuth2 authentication
  * Token management
  * API integration
- **Access**: Requires access code
- **Status**: Working

### 4. Command Manager (Premium)
- **Description**: Manage and edit chat commands
- **Features**:
  * Command customization
  * Response management
  * Category organization
- **Access**: Requires access code
- **Status**: Working

## Access Control System

### Access Levels
1. **Base Access**
   - No access code required
   - Access to free modules
   - Basic functionality

2. **Premium Access**
   - Module-specific access codes
   - Individual module purchase
   - Feature-specific permissions

3. **Master Access**
   - Full system access
   - All modules unlocked
   - All features available

### Access Management
1. **Configuration**
   - JSON-based access settings
   - User-specific permissions
   - Module-specific features
   - Persistent storage

2. **Verification**
   - Single code entry at startup
   - Automatic access updates
   - Visual status indicators
   - Error handling

## Technical Implementation

### Core Components
1. **Main Application (foslauncher_gui.py)**
   - GUI initialization and management
   - Module discovery
   - Access control
   - Error handling
   - User interface components

2. **Access Manager**
   - Code validation
   - Permission checking
   - Configuration management
   - User access tracking

3. **Module System**
   - Dynamic loading
   - Access verification
   - Status monitoring
   - Error recovery

### Configuration Files
1. **manifest.json**
   - Module definitions
   - Access requirements
   - Status tracking
   - Entry points

2. **access.json**
   - User permissions
   - Access codes
   - Feature settings
   - Version control

3. **config.json**
   - Application settings
   - UI preferences
   - Module configurations
   - System defaults

## Development Guidelines

### Code Standards
1. **Module Development**
   - Follow manifest structure
   - Implement access control
   - Use logging system
   - Handle errors properly

2. **Access Control**
   - Single entry point
   - Clear status indicators
   - Proper error handling
   - Persistent settings

3. **Documentation**
   - Update documentation
   - Document changes
   - Maintain backups
   - Version control

### Best Practices
1. **Error Handling**
   - Comprehensive logging
   - User feedback
   - Error recovery
   - Debug information

2. **Security**
   - Access verification
   - Secure storage
   - Input validation
   - Error messages

3. **User Experience**
   - Clear status indicators
   - Intuitive interface
   - Error feedback
   - Helpful messages

## Current Status

### Working Features
1. **Core Application**
   - Module discovery
   - Access control
   - GUI interface
   - Error handling

2. **Modules**
   - All modules functional
   - Access control working
   - Status tracking
   - Error handling

3. **Access Control**
   - Single entry point
   - Code validation
   - Permission checking
   - Status display

### Known Issues
1. **Logging System**
   - Standardize implementations
   - Consistent formats
   - Better management

2. **WebSocket Implementation**
   - Consolidate code
   - Standardize messages
   - Improve handling

3. **File Organization**
   - Standardize structure
   - Clarify responsibilities
   - Improve documentation

## Future Improvements
1. **User Interface**
   - Dark mode
   - Responsive design
   - Keyboard shortcuts
   - Better accessibility

2. **Module System**
   - Better isolation
   - Improved communication
   - Enhanced features
   - More modules

3. **Access Control**
   - Multiple users
   - Role-based access
   - Better management
   - Enhanced security

4. **Development**
   - Automated testing
   - CI/CD pipeline
   - Code formatting
   - Documentation generation

## Project Structure
```
FoSLauncher/
├── foslauncher_gui.py          # Main GUI application entry point
├── config.json                 # Main configuration file
├── logs/                       # Log files directory
├── backup/                     # Backup files directory
└── modules/                    # Module directory
    ├── logger.py               # Centralized logging system
    ├── access.json             # Access control configuration
    ├── manifest.json           # Module manifest
    ├── command_manager_gui.py  # GUI command management
    ├── chatbot_plus_module.py  # Chatbot+ module definition
    ├── gui/                    # GUI module
    │   ├── main.py            # GUI implementation
    │   └── config.json        # GUI configuration
    ├── chatbot_plus/          # Chatbot+ module
    │   ├── main.py            # Main module implementation
    │   ├── unified_chat.py    # Unified chat handling
    │   ├── command_manager.py # Command management
    │   ├── status_manager.py  # Status management
    │   ├── commands.json      # Command definitions
    │   ├── requirements.txt   # Module dependencies
    │   └── stream_clients/    # Stream client implementations
    │       ├── youtube_client.py  # YouTube client
    │       └── config.json    # Stream client configuration
    └── chatsplitter/          # Chat splitter module
        └── main.py            # Chat splitter implementation
```

## Application Architecture

### Main Application (foslauncher_gui.py)
The FoSLauncher application serves as the main entry point and orchestrator for all modules. Key features:
- Centralized module management
- Access control integration
- Configuration management
- Module discovery and loading
- User interface management

### Module System
Modules are self-contained components that provide specific functionality:
- Each module has a unique ID and entry point
- Modules are discovered through the manifest.json
- Access control is enforced at the module level
- Modules can be enabled/disabled through configuration

### Access Control
The access control system has been updated to:
- Support base features without passwords
- Use a master code for full access
- Manage module-specific access
- Track user-specific module access
- Provide comprehensive logging

### Logging System
The centralized logging system provides:
- Standardized log levels
- Module-specific event logging
- User action tracking
- Configuration change logging
- Error context logging
- Rotating file handler (10MB size limit, 5 backups)

## Configuration Management
1. **Access Control**:
   - Base features available without password
   - Master code for full access
   - Module-specific access requirements
   - User-specific module access
   - Access code validation

2. **Module Settings**:
   - Module manifest (manifest.json)
     * ID: Unique module identifier
     * Name: Display name
     * Description: Module description
     * Entry: Path to main entry point
     * RequiresCode: Boolean indicating if access code is needed
     * Status: Module status (Working/Disabled)
   - Access configuration (access.json)
     * User-specific module access
     * Feature-level permissions
     * Access code definitions

3. **Application Settings**:
   - Log level configuration
   - Module discovery settings
   - Error handling preferences
   - User interface settings

## Module System
1. **Module Structure**:
   - Each module must have:
     * Unique ID
     * Main entry point
     * Access requirements
     * Status indicator
   - Modules are discovered through manifest.json
   - Access is controlled through access.json

2. **Access Requirements**:
   - Base features: No access code required
   - Premium features: Access code required
   - Master access: Full system access
   - User-specific: Per-module access control

3. **Module Loading**:
   - Modules are loaded dynamically
   - Access is verified before loading
   - Error handling for failed loads
   - Proper cleanup on exit

## Error Handling
1. **Logging System**:
   - Centralized logging with FoSLogger
   - File and console output
   - Log rotation and management
   - Context-aware logging

2. **Error Types**:
   - Access control errors
   - Module loading errors
   - Configuration errors
   - Runtime errors

3. **Debugging**:
   - Comprehensive logging
   - Error context tracking
   - User feedback
   - Recovery procedures

## Current Implementation Status
1. **Access Control**:
   - ✅ Base access without password
   - ✅ Master code implementation
   - ✅ Module-specific access
   - ✅ User-specific permissions
   - ✅ Access code validation

2. **Module System**:
   - ✅ Module discovery
   - ✅ Access verification
   - ✅ Dynamic loading
   - ✅ Error handling

3. **Configuration**:
   - ✅ JSON-based configuration
   - ✅ Schema validation
   - ✅ Default settings
   - ✅ User-specific configs

4. **Logging**:
   - ✅ Centralized logging
   - ✅ File rotation
   - ✅ Error tracking
   - ✅ Debug support

## Known Issues
1. **Logging System**:
   - Standardize logging implementations
   - Ensure consistent log formats
   - Improve log management

2. **WebSocket Implementation**:
   - Consolidate duplicate WebSocket server code
   - Standardize WebSocket message formats
   - Improve error handling

3. **File Organization**:
   - Standardize module structure
   - Clarify module responsibilities
   - Improve documentation

## Development Guidelines
1. Always create backups before making changes
2. Document all changes in README files
3. Maintain backward compatibility
4. Follow the established logging patterns
5. Use the access control system for module access

## Future Improvements
1. Implement automated testing
2. Add user interface improvements
3. Enhance error recovery
4. Improve configuration management
5. Add more detailed logging

Overview
--------
FoSLauncher is a modular application that provides a unified interface for managing various streaming and content creation tools. The application follows a pay-per-module business model, allowing users to purchase only the features they need.

Core Application
---------------
The FoSLauncher itself is not a module but the main application that provides:
- Main GUI interface
- Access control system
- Configuration management
- Module management
- Logging system

Project Structure
---------------
```
FoSLauncher/
├── foslauncher_gui.py          # Main GUI application entry point
├── config.json                 # Main configuration file
├── logs/                       # Log files directory
├── backup/                     # Backup files directory
└── modules/                    # Module directory
    ├── logger.py               # Centralized logging system
    ├── access.json             # Access control configuration
    ├── manifest.json           # Module manifest
    ├── command_manager_gui.py  # GUI command management
    ├── chatbot_plus_module.py  # Chatbot+ module definition
    ├── gui/                    # GUI module
    │   ├── main.py            # GUI implementation
    │   └── config.json        # GUI configuration
    ├── chatbot_plus/          # Chatbot+ module
    │   ├── main.py            # Main module implementation
    │   ├── unified_chat.py    # Unified chat handling
    │   ├── command_manager.py # Command management
    │   ├── status_manager.py  # Status management
    │   ├── commands.json      # Command definitions
    │   ├── requirements.txt   # Module dependencies
    │   └── stream_clients/    # Stream client implementations
    │       ├── youtube_client.py  # YouTube client
    │       └── config.json    # Stream client configuration
    └── chatsplitter/          # Chat splitter module
        └── main.py            # Chat splitter implementation
```

Available Modules (All Purchasable Separately)
--------------------------------------------

1. Chatbot+ (Base Module)
   - Single integrated chat interface
   - Basic command management
   - Real-time message handling
   - WebSocket support
   - Price: Base tier
   - Technical Details:
     * Component Architecture:
       - main.py: Module entry point and WebSocket server
       - unified_chat.py: Unified chat message handling
       - command_manager.py: Command processing system
       - status_manager.py: Stream status monitoring
     * Features:
       - Multi-platform chat support
       - Command processing
       - Status monitoring
       - WebSocket integration
       - Proper thread management
       - Clean shutdown handling

2. ChatSplitter
   - Chat message splitting functionality
   - JSON file processing
   - File size management
   - User-friendly interface
   - Price: Separate purchase
   - Technical Details:
     * Message processing
     * Split configuration
     * Output formatting
     * Error handling

3. YouTube Login
   - Authentication handling
   - API integration
   - Token management
   - YouTube chat integration
   - Price: Separate purchase
   - Technical Details:
     * OAuth2 authentication via browser
     * Live stream monitoring
     * Chat message handling
     * Stream status tracking
     * WebSocket integration
     * Automatic reconnection
     * Rate limit management

4. Command Manager
   - Advanced command editing interface
   - Bulk command import/export via CSV
   - Response management
   - Category organization
   - Live preview
   - Push to chatbot functionality
   - RPG sync features
   - Price: Separate purchase
   - Technical Details:
     * Command registration
     * Permission checking
     * Command execution
     * Response handling
     * Bulk operations
     * Live preview
     * RPG integration

Future Integration Modules
-------------------------
The following modules are planned for future development (all purchasable separately):
- X (Twitter) Login
- Twitch Login
- Other platform integrations
- Each with its own pricing

Access Control System
-------------------
- No predefined access levels
- Each module has its own access control
- Users can purchase any combination of modules
- Access is granted per module based on purchase/subscription
- Configuration tracks which modules each user has access to

Configuration System
------------------
- Module-specific settings
- User-specific module access
- Feature toggles based on purchased modules
- User preferences
- Configuration Files:
  * config.json: Main application configuration
  * modules/config.json: Module-specific settings
  * modules/access.json: Access control settings
  * modules/chatbot_plus/config.json: Chatbot+ settings
  * modules/chatbot_plus/commands.json: Command definitions
  * modules/gui/config.json: GUI settings

Business Model
-------------
- Pay-per-module system
- Users can purchase any combination of modules
- No predefined access levels
- Each module is priced separately
- Future modules will follow the same individual purchase model

Technical Implementation
----------------------
- Modular architecture
- Independent module loading
- Secure access control per module
- Configuration persistence
- Comprehensive logging
- WebSocket support for real-time features
- Logging System:
  * Multiple log levels (DEBUG, INFO, WARNING, ERROR, CRITICAL)
  * Rotating file handler
  * Console output
  * Error tracking
  * Daily rotation
  * Size-based rotation
  * Backup retention

Development Guidelines
--------------------
1. Each module should be self-contained
2. Modules should not depend on other modules
3. Access control should be implemented per module
4. Configuration should be module-specific
5. Logging should be consistent across all modules
6. New modules should follow the same purchase model
7. Documentation should be maintained for each module

Security Features
---------------
- Access code verification
- Secure credential storage
- Permission-based module access
- OAuth2 for platform integration
- WebSocket communication
- Rate limiting
- Error handling
- Secure token storage

Usage
-----
1. Start the launcher: `python3 foslauncher_gui.py`
2. Purchase desired modules
3. Launch purchased modules
4. For YouTube chat:
   - Start a live stream
   - Chat messages will be processed automatically
   - Commands starting with '!' will be processed
5. Monitor status:
   - Use !status command
   - Check GUI status panel
   - Review logs if needed

Troubleshooting
--------------
1. Access Issues:
   - Verify module purchase
   - Check access configuration
   - Review error logs
2. Module Issues:
   - Check module configuration
   - Verify dependencies
   - Review module logs
3. YouTube Integration:
   - Verify OAuth2 credentials
   - Check network connectivity
   - Monitor rate limits
4. Command Issues:
   - Check command syntax
   - Verify permissions
   - Review command logs

Module Evolution Details
-----------------------

1. Chatbot+ Evolution
   - Originally combined YouTube and chat functionality
   - Split into separate modules for better modularity
   - Enhanced with WebSocket support
   - Improved error handling and recovery
   - Added thread-safe message handling

2. YouTube Integration Evolution
   - Started as part of Chatbot+
   - Separated into standalone module
   - Enhanced OAuth2 implementation
   - Added automatic reconnection
   - Improved rate limit handling

3. Command System Evolution
   - Basic command handling in Chatbot+
   - Enhanced with Command Manager module
   - Added bulk operations
   - Introduced live preview
   - Added RPG sync features

4. ChatSplitter Evolution
   - Added JSON file processing
   - Enhanced file size management
   - Improved user interface
   - Added error handling
   - Optimized performance

5. Access Control Evolution
   - Started with basic/premium/master levels
   - Transitioned to per-module access
   - Enhanced security features
   - Added purchase tracking
   - Improved configuration management

6. Logging System Evolution
   - Basic file logging
   - Added rotation support
   - Enhanced error tracking
   - Added module-specific logging
   - Improved log management

7. Configuration Evolution
   - Single config file
   - Module-specific configs
   - Enhanced security
   - Improved validation
   - Added backup support

8. GUI Evolution
   - Basic Tkinter interface
   - Upgraded to CustomTkinter
   - Enhanced module display
   - Improved user experience
   - Added status monitoring

Technical Debt and Future Improvements
------------------------------------
1. Known Issues:
   - WebSocket connection stability
   - Rate limit handling optimization
   - Memory usage in long sessions
   - Configuration validation
   - Error recovery procedures

2. Planned Improvements:
   - Enhanced module isolation
   - Improved error handling
   - Better resource management
   - Enhanced security features
   - Performance optimization

3. Future Considerations:
   - Additional platform integrations
   - Enhanced module communication
   - Improved user experience
   - Better documentation
   - Automated testing

Detailed File Analysis
--------------------

Root Directory Files:
1. foslauncher_gui.py (19KB)
   - Main application entry point
   - Handles module loading and initialization
   - Manages application lifecycle
   - Needs improvement:
     * Add better error handling for module loading
     * Implement graceful shutdown
     * Add module dependency resolution
     * Enhance logging for startup/shutdown

2. config.json (1.5KB)
   - Main application configuration
   - Module settings
   - Access control configuration
   - Needs improvement:
     * Add schema validation
     * Implement configuration versioning
     * Add backup/restore functionality
     * Enhance security for sensitive data

3. test_features.py (15KB)
   - Feature testing suite
   - Module integration tests
   - Performance benchmarks
   - Needs improvement:
     * Add more comprehensive tests
     * Implement automated testing
     * Add performance regression tests
     * Include security tests

4. commands.json (1KB)
   - Global command definitions
   - Command permissions
   - Response templates
   - Needs improvement:
     * Add command versioning
     * Implement command validation
     * Add command documentation
     * Include command examples

5. requirements.txt (277B)
   - Project dependencies
   - Version specifications
   - Needs improvement:
     * Add dependency groups
     * Specify minimum versions
     * Add development dependencies
     * Include platform-specific requirements

Module Files:

1. modules/logger.py (6.1KB)
   - Centralized logging system
   - Log rotation and management
   - Multiple log levels
   - Needs improvement:
     * Add log compression
     * Implement log analysis
     * Add log alerting
     * Enhance log formatting

2. modules/websocket_server.py (2.5KB)
   - WebSocket communication
   - Real-time updates
   - Connection management
   - Needs improvement:
     * Add connection pooling
     * Implement reconnection logic
     * Add message queuing
     * Enhance security

3. modules/config.py (4.1KB)
   - Configuration management
   - Settings validation
   - Configuration loading
   - Needs improvement:
     * Add configuration encryption
     * Implement configuration migration
     * Add configuration backup
     * Enhance validation

4. modules/access_control.py (4.5KB)
   - Access management
   - Permission checking
   - User authentication
   - Needs improvement:
     * Add role-based access
     * Implement audit logging
     * Add session management
     * Enhance security

Chatbot+ Module:

1. modules/chatbot_plus/main.py (9.3KB)
   - Module entry point
   - Chat processing
   - Command handling
   - Needs improvement:
     * Add message queuing
     * Implement rate limiting
     * Add message filtering
     * Enhance error handling

2. modules/chatbot_plus/unified_chat.py (12KB)
   - Unified chat interface
   - Message processing
   - Platform integration
   - Needs improvement:
     * Add message batching
     * Implement message prioritization
     * Add message formatting
     * Enhance platform support

3. modules/chatbot_plus/command_manager.py (12KB)
   - Command processing
   - Response management
   - Command validation
   - Needs improvement:
     * Add command aliases
     * Implement command chaining
     * Add command templates
     * Enhance response formatting

4. modules/chatbot_plus/status_manager.py (8.4KB)
   - Status monitoring
   - Health checks
   - Performance tracking
   - Needs improvement:
     * Add detailed metrics
     * Implement alerting
     * Add performance optimization
     * Enhance monitoring

YouTube Integration:

1. modules/youtube_login/main.py (2.5KB)
   - YouTube authentication
   - Token management
   - API integration
   - Needs improvement:
     * Add token refresh
     * Implement rate limiting
     * Add error recovery
     * Enhance security

GUI Module:

1. modules/gui/main.py (19KB)
   - User interface
   - Module management
   - Status display
   - Needs improvement:
     * Add dark mode
     * Implement responsive design
     * Add keyboard shortcuts
     * Enhance accessibility

2. modules/gui/dialogs.py (2.0KB)
   - Dialog windows
   - User input
   - Error messages
   - Needs improvement:
     * Add input validation
     * Implement progress indicators
     * Add tooltips
     * Enhance error messages

ChatSplitter Module:

1. modules/chatsplitter/main.py (13KB)
   - Chat splitting
   - File processing
   - Size management
   - Needs improvement:
     * Add batch processing
     * Implement progress tracking
     * Add file validation
     * Enhance error handling

Critical Issues and Recommendations
---------------------------------

1. Security:
   - Implement proper token encryption
   - Add input sanitization
   - Enhance access control
   - Add audit logging
   - Implement rate limiting

2. Performance:
   - Add connection pooling
   - Implement message batching
   - Optimize file processing
   - Add caching
   - Implement load balancing

3. Reliability:
   - Add automatic reconnection
   - Implement error recovery
   - Add data validation
   - Enhance logging
   - Add monitoring

4. Maintainability:
   - Add comprehensive documentation
   - Implement automated testing
   - Add code comments
   - Enhance error messages
   - Add version control

5. Scalability:
   - Implement message queuing
   - Add load balancing
   - Optimize resource usage
   - Add horizontal scaling
   - Implement caching

6. User Experience:
   - Add progress indicators
   - Implement responsive design
   - Add keyboard shortcuts
   - Enhance error messages
   - Add tooltips

7. Development:
   - Add development environment
   - Implement CI/CD
   - Add code formatting
   - Enhance testing
   - Add documentation generation

8. Deployment:
   - Add deployment scripts
   - Implement configuration management
   - Add backup/restore
   - Enhance monitoring
   - Add logging aggregation

This documentation will be updated as the project evolves. 

def __init__(self):
    logger.info("Initializing FoSLauncher")
    self.root = None
    self.config = None
    self.access_manager = None
    self.modules = []
    self._master_code_verified = False
    self.initialize()  # First call
    
def run(self) -> None:
    try:
        self.initialize()  # Second call
        self.root.mainloop() 