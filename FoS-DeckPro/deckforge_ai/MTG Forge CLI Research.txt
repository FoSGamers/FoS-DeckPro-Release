# MTG Forge CLI Research

## üß© Overview
MTG Forge is an open-source desktop application for playing and testing Magic: The Gathering decks. While primarily GUI-driven, it includes a **Command Line Interface (CLI) for running AI vs. AI simulations**, which is ideal for DeckForge AI.

GitHub: https://github.com/Card-Forge/forge
Documentation: limited, but source code + forum archives and community tools provide insights.

---

## ‚úÖ Forge CLI Simulation Mode

### Usage:
```bash
java -jar forge-gui-desktop.jar sim <deck_file.dck>
```

Or, from command line if you're inside the Forge folder:
```bash
./forge.sh sim deck.dck
```

### Requirements:
- The `.dck` file must be in Forge‚Äôs `/res/decks/constructed/` directory or provided with full path.
- Forge will simulate matches using the given deck vs. one of its built-in AI decks.
- Results are printed to the console (standard output), e.g.:
  ```
  Game 1: Player wins
  Game 2: Opponent wins
  Game 3: Player wins
  ```
- No GUI interaction needed.

---

## üìÇ Where to Place `.dck` Files
Place your exported deck file in one of the following:
- `[FORGE_DIR]/res/decks/constructed/`
- Or pass the full path with CLI command

---

## üß™ Result Handling
### Logging:
Forge does not automatically output to a file by default.
You can redirect stdout to capture results:
```bash
java -jar forge-gui-desktop.jar sim my_deck.dck > forge_simulation_result.txt
```

### Example automation:
```bash
#!/bin/bash
cd /path/to/forge/
java -jar forge-gui-desktop.jar sim /path/to/exported/deck.dck > forge_simulation_result.txt
```

---

## üß† What‚Äôs Missing / Limitations
- No explicit CLI flag for opponent deck (random AI deck is selected)
- No options to configure number of games (default seems to be 1 match)
- Must handle parsing results from `stdout`

---

## üîÅ Integration with DeckForge AI
1. Export `.dck` deck from GUI
2. Call Forge CLI:
   ```python
   subprocess.run(["java", "-jar", "forge-gui-desktop.jar", "sim", "autodeck.dck"], stdout=logfile)
   ```
3. Parse `forge_simulation_result.txt` with `parse_forge_result_log()`
4. Update `deck_stats.json` accordingly

---

## üìå Links
- [Forge GitHub](https://github.com/Card-Forge/forge)
- [Forge Releases](https://downloads.cardforge.org/)
- [Deck File Format](https://github.com/Card-Forge/forge/wiki/Deck-Format)

---

Let me know if you want a full bash or Python launcher script for Forge CLI simulations!


[![Forge - Open Source Magic The Gathering game - PC/Android (battling ...](https://tse3.mm.bing.net/th?id=OIP.uZ5G9U3JO5Z4pjZWwlTTtgHaEK\&pid=Api)](https://rpgcodex.net/forums/threads/forge-open-source-magic-the-gathering-game-pc-android-battling-with-ai-multiplayer-and-more.114703/)

To enhance your DeckForge AI system with comprehensive control over MTG Forge's command-line interface (CLI), here's an in-depth guide covering simulation commands, deck management, and advanced configurations.

---

## ‚öôÔ∏è Forge CLI: AI vs. AI Simulation

Forge supports headless AI vs. AI simulations via the CLI. The general syntax is:([slightlymagic.net][1])

```bash
java -jar forge-gui-desktop.jar sim <deck1.dck> <deck2.dck> [number_of_games]
```



**Parameters:**

* `<deck1.dck>`: Path to the first deck file.
* `<deck2.dck>`: Path to the second deck file.
* `[number_of_games]`: Optional. Number of games to simulate; defaults to 1 if omitted.([Remote OK][2])

Ensure that both deck files are accessible and correctly formatted.

---

## üìÅ Deck File Management

**Deck Placement:**

* Place `.dck` files in Forge's constructed decks directory:

  * Windows: `res\\decks\\constructed\\`
  * macOS/Linux: `res/decks/constructed/`

**Deck Format:**
A typical `.dck` file structure:

```plaintext
[metadata]
Name=Deck Name

[main]
4 Lightning Bolt
3 Goblin Guide
...
```



Ensure that the deck files are correctly formatted to prevent loading errors during simulation.

---

## üß™ Advanced Simulation Options

Forge's CLI offers additional parameters for customized simulations:

* **Deck Directory Specification:**
  Use the `-D` flag to specify the directory containing deck files:([slightlymagic.net][1])

```bash
  java -jar forge-gui-desktop.jar sim -D /path/to/decks -d deck1.dck deck2.dck -n 10
```



* `-D /path/to/decks`: Specifies the directory containing the decks.

* `-d deck1.dck deck2.dck`: Specifies the deck files to use.

* `-n 10`: Number of games to simulate.

* **Quiet Mode:**
  Suppresses GUI output for headless operation:

```bash
  java -jar forge-gui-desktop.jar sim -q deck1.dck deck2.dck -n 10
```



* `-q`: Enables quiet mode.

Note: The availability of these flags may vary based on the Forge version.

---

## üß† AI Behavior and Customization

Forge's AI operates based on predefined heuristics and does not currently support user-defined AI profiles or difficulty settings via the CLI. However, you can influence AI behavior by customizing deck compositions and leveraging Forge's scripting capabilities.

---

## üîÑ Integration with DeckForge AI

To integrate Forge CLI simulations into your DeckForge AI system:

1. **Deck Export:**
   Ensure your AI-generated decks are exported in Forge's `.dck` format.

2. **Simulation Execution:**
   Use the CLI command to simulate matches between decks.

3. **Result Parsing:**
   Parse the output file (`simulation_results.txt`) to extract win/loss data.

4. **Learning Engine Update:**
   Feed the parsed results into your learning engine to adjust deck-building strategies accordingly.

By automating this process, your AI can iteratively improve its deck-building capabilities based on empirical performance data.

---

## üìö Additional Resources

* **Forge GitHub Repository:** [https://github.com/Card-Forge/forge](https://github.com/Card-Forge/forge)
* **Forge Community Forums:** [https://www.slightlymagic.net/forum/viewforum.php?f=52](https://www.slightlymagic.net/forum/viewforum.php?f=52)
* **Forge Download Page:** [https://downloads.cardforge.org/](https://downloads.cardforge.org/)

These resources provide further insights into Forge's capabilities and community-driven enhancements.

---

By leveraging Forge's CLI features and integrating them into your DeckForge AI system, you can automate extensive simulations, analyze performance metrics, and refine deck-building algorithms for optimal results.

[1]: https://www.slightlymagic.net/forum/viewtopic.php?f=52&t=20283&utm_source=chatgpt.com "Running AI vs AI matches headless (without gui)"
[2]: https://remoteok.com/remote-director%2Blead%2Bvoice-jobs?utm_source=chatgpt.com "Remote Director + Lead + Voice Jobs with great benefits and pay"
