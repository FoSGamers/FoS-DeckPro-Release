Chat: Mtg_Card_Price_Scraper
Started: 2024-05-18 23:56:31

[2024-05-18 23:56:31] FoSGamers:
Can you help create a script with a simple gui display that will scrape Magic the Gathering card prices from tcgplayer.com (using the search function)  and display those prices in a format of lowest to highest price in 3 price increments when propted to base on a custom prompt the user enters?

[2024-05-18 23:56:44] ChatGPT:
Certainly! Below is an example Python script that uses the `requests` library to scrape data from TCGPlayer and `tkinter` for the GUI. Note that web scraping from a site like TCGPlayer may be against their terms of service, so always check their policy and consider using their official API if available.

Here’s a simple script to achieve what you’re looking for:

1. **Install Required Libraries**:
   Make sure you have the required libraries installed. You can install them using pip:
   ```sh
   pip install requests beautifulsoup4
   ```

2. **Python Script**:
   ```python
   import requests
   from bs4 import BeautifulSoup
   import tkinter as tk
   from tkinter import simpledialog, messagebox

   def get_card_prices(card_name):
       url = f'https://www.tcgplayer.com/search/magic/product?q={card_name}'
       response = requests.get(url)
       soup = BeautifulSoup(response.text, 'html.parser')

       prices = []
       for price_tag in soup.select('.search-result__market-price--value'):
           price_text = price_tag.get_text().strip().replace('$', '')
           try:
               price = float(price_text)
               prices.append(price)
           except ValueError:
               continue

       return sorted(prices)

   def display_prices(prices):
       if not prices:
           messagebox.showinfo("No Results", "No prices found for the specified card.")
           return

       prices_text = "\n".join(
           f"${prices[i]:.2f} - ${prices[i + 1]:.2f} - ${prices[i + 2]:.2f}" 
           for i in range(0, len(prices) - 2, 3)
       )
       messagebox.showinfo("Card Prices", prices_text)

   def main():
       root = tk.Tk()
       root.withdraw()  # Hide the root window

       card_name = simpledialog.askstring("Input", "Enter the Magic: The Gathering card name:")
       if card_name:
           prices = get_card_prices(card_name)
           display_prices(prices)

   if __name__ == '__main__':
       main()
   ```

### Explanation:
- **Import Libraries**: The necessary libraries (`requests`, `BeautifulSoup`, `tkinter`) are imported.
- **get_card_prices**: This function constructs a URL based on the card name entered by the user, sends a request to TCGPlayer, and parses the response to extract card prices.
- **display_prices**: This function formats the prices into groups of three and displays them using a message box.
- **main**: This is the entry point of the script, which creates a simple dialog to get the card name from the user and then fetches and displays the card prices.

### Running the Script:
To run the script, save it to a file (e.g., `mtg_price_scraper.py`) and run it with Python:
```sh
python mtg_price_scraper.py
```

This script provides a simple GUI for entering the card name and displays the prices in groups of three. Be aware that TCGPlayer may change their website structure, which could break the scraper, so maintaining and updating the scraping logic might be necessary. Always prefer using an official API if one is available for more robust and reliable data retrieval.

[2024-05-18 23:57:47] FoSGamers:
Is there an api to use for tcgplayer.com 

[2024-05-18 23:58:06] ChatGPT:
Yes, TCGPlayer offers an official API that you can use to access their data in a more reliable and compliant manner. The TCGPlayer API provides endpoints for searching products, getting pricing information, and more. Here's a basic example of how to use the TCGPlayer API to get card prices and display them using a simple GUI.

### Steps:

1. **Register for API Access**:
   - You need to register for a TCGPlayer API key. Follow the instructions on the [TCGPlayer Developer Portal](https://developer.tcgplayer.com/) to get your API key.

2. **Install Required Libraries**:
   Make sure you have the required libraries installed. You can install them using pip:
   ```sh
   pip install requests tkinter
   ```

3. **Python Script**:
   ```python
   import requests
   import tkinter as tk
   from tkinter import simpledialog, messagebox

   # Replace with your own API credentials
   PUBLIC_KEY = 'your_public_key'
   PRIVATE_KEY = 'your_private_key'
   BEARER_TOKEN = None

   def get_bearer_token():
       global BEARER_TOKEN
       url = "https://api.tcgplayer.com/token"
       headers = {
           'Content-Type': 'application/json',
           'Accept': 'application/json',
       }
       data = {
           'grant_type': 'client_credentials',
           'client_id': PUBLIC_KEY,
           'client_secret': PRIVATE_KEY
       }
       response = requests.post(url, headers=headers, json=data)
       BEARER_TOKEN = response.json().get('access_token')

   def get_card_prices(card_name):
       if not BEARER_TOKEN:
           get_bearer_token()
       
       search_url = f'https://api.tcgplayer.com/catalog/products?categoryId=1&productName={card_name}'
       headers = {
           'Authorization': f'Bearer {BEARER_TOKEN}',
           'Accept': 'application/json',
       }
       search_response = requests.get(search_url, headers=headers).json()
       product_ids = [product['productId'] for product in search_response['results']]

       if not product_ids:
           return []

       pricing_url = f'https://api.tcgplayer.com/pricing/product/{",".join(map(str, product_ids))}'
       pricing_response = requests.get(pricing_url, headers=headers).json()

       prices = []
       for price in pricing_response['results']:
           prices.append(price['marketPrice'])
       return sorted(price for price in prices if price is not None)

   def display_prices(prices):
       if not prices:
           messagebox.showinfo("No Results", "No prices found for the specified card.")
           return

       prices_text = "\n".join(
           f"${prices[i]:.2f} - ${prices[i + 1]:.2f} - ${prices[i + 2]:.2f}" 
           for i in range(0, len(prices) - 2, 3)
       )
       messagebox.showinfo("Card Prices", prices_text)

   def main():
       root = tk.Tk()
       root.withdraw()  # Hide the root window

       card_name = simpledialog.askstring("Input", "Enter the Magic: The Gathering card name:")
       if card_name:
           prices = get_card_prices(card_name)
           display_prices(prices)

   if __name__ == '__main__':
       main()
   ```

### Explanation:
1. **API Credentials**: Replace `your_public_key` and `your_private_key` with the actual keys you receive from TCGPlayer.
2. **get_bearer_token**: This function fetches an access token using your API credentials.
3. **get_card_prices**: This function searches for the card by name and retrieves its prices. It handles API calls to search for products and then fetches their prices.
4. **display_prices**: This function formats and displays the prices in groups of three.
5. **main**: The entry point of the script that shows a simple dialog to get the card name from the user and then fetches and displays the card prices.

### Running the Script:
To run the script, save it to a file (e.g., `mtg_price_scraper_with_api.py`) and run it with Python:
```sh
python mtg_price_scraper_with_api.py
```

Using the TCGPlayer API is more robust and compliant compared to web scraping, and it provides a more reliable way to access the latest data.

[2024-05-19 00:01:46] FoSGamers:
Make the script use the api. Also make the script search based on Magic the Gathering card abbreviation on the bottom left of most cards and the number of the card.

[2024-05-19 00:02:07] ChatGPT:
Certainly! Here's an updated version of the script that uses the TCGPlayer API to search for Magic: The Gathering cards based on their set abbreviation and card number, and then displays the prices in a GUI.

1. **Register for API Access**:
   Make sure you have your TCGPlayer API keys (public and private).

2. **Install Required Libraries**:
   Ensure you have the necessary libraries installed:
   ```sh
   pip install requests tkinter
   ```

3. **Python Script**:
   ```python
   import requests
   import tkinter as tk
   from tkinter import simpledialog, messagebox

   # Replace with your own API credentials
   PUBLIC_KEY = 'your_public_key'
   PRIVATE_KEY = 'your_private_key'
   BEARER_TOKEN = None

   def get_bearer_token():
       global BEARER_TOKEN
       url = "https://api.tcgplayer.com/token"
       headers = {
           'Content-Type': 'application/json',
           'Accept': 'application/json',
       }
       data = {
           'grant_type': 'client_credentials',
           'client_id': PUBLIC_KEY,
           'client_secret': PRIVATE_KEY
       }
       response = requests.post(url, headers=headers, json=data)
       BEARER_TOKEN = response.json().get('access_token')

   def get_card_prices(set_abbreviation, card_number):
       if not BEARER_TOKEN:
           get_bearer_token()

       # Search for the card based on set abbreviation and card number
       search_url = f'https://api.tcgplayer.com/catalog/products?categoryId=1&productLineName=Magic&setName={set_abbreviation}&productNumber={card_number}'
       headers = {
           'Authorization': f'Bearer {BEARER_TOKEN}',
           'Accept': 'application/json',
       }
       search_response = requests.get(search_url, headers=headers).json()
       product_ids = [product['productId'] for product in search_response['results']]

       if not product_ids:
           return []

       # Get pricing information for the found product IDs
       pricing_url = f'https://api.tcgplayer.com/pricing/product/{",".join(map(str, product_ids))}'
       pricing_response = requests.get(pricing_url, headers=headers).json()

       prices = []
       for price in pricing_response['results']:
           market_price = price.get('marketPrice')
           if market_price:
               prices.append(market_price)
       return sorted(prices)

   def display_prices(prices):
       if not prices:
           messagebox.showinfo("No Results", "No prices found for the specified card.")
           return

       prices_text = "\n".join(
           f"${prices[i]:.2f} - ${prices[i + 1]:.2f} - ${prices[i + 2]:.2f}" 
           for i in range(0, len(prices) - 2, 3)
       )
       if len(prices) % 3 == 1:
           prices_text += f"\n${prices[-1]:.2f}"
       elif len(prices) % 3 == 2:
           prices_text += f"\n${prices[-2]:.2f} - ${prices[-1]:.2f}"

       messagebox.showinfo("Card Prices", prices_text)

   def main():
       root = tk.Tk()
       root.withdraw()  # Hide the root window

       set_abbreviation = simpledialog.askstring("Input", "Enter the Magic: The Gathering set abbreviation:")
       card_number = simpledialog.askstring("Input", "Enter the card number:")

       if set_abbreviation and card_number:
           prices = get_card_prices(set_abbreviation, card_number)
           display_prices(prices)

   if __name__ == '__main__':
       main()
   ```

### Explanation:
1. **API Credentials**: Replace `your_public_key` and `your_private_key` with the actual keys you receive from TCGPlayer.
2. **get_bearer_token**: This function fetches an access token using your API credentials.
3. **get_card_prices**: This function searches for the card using the set abbreviation and card number, then retrieves its prices.
4. **display_prices**: This function formats and displays the prices in groups of three, handling any remaining prices that don't fit perfectly into groups of three.
5. **main**: The entry point of the script, which shows dialogs to get the set abbreviation and card number from the user and then fetches and displays the card prices.

### Running the Script:
To run the script, save it to a file (e.g., `mtg_price_scraper_with_api.py`) and run it with Python:
```sh
python mtg_price_scraper_with_api.py
```

This script leverages the TCGPlayer API to search for cards by their set abbreviation and card number, and then displays the retrieved prices in a user-friendly format. This approach ensures compliance with TCGPlayer's terms of service and provides a more reliable way to access their data.

[2024-05-19 00:37:30] FoSGamers:
Can you upload the full script to my Google drive?

[2024-05-19 00:37:47] ChatGPT:
I don't have the capability to directly upload files to your Google Drive. However, I can guide you on how to do it yourself. Here’s the complete script, which you can copy and save to a file on your computer:

### Script Content
```python
import requests
import tkinter as tk
from tkinter import simpledialog, messagebox

# Replace with your own API credentials
PUBLIC_KEY = 'your_public_key'
PRIVATE_KEY = 'your_private_key'
BEARER_TOKEN = None

def get_bearer_token():
    global BEARER_TOKEN
    url = "https://api.tcgplayer.com/token"
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
    }
    data = {
        'grant_type': 'client_credentials',
        'client_id': PUBLIC_KEY,
        'client_secret': PRIVATE_KEY
    }
    response = requests.post(url, headers=headers, json=data)
    BEARER_TOKEN = response.json().get('access_token')

def get_card_prices(set_abbreviation, card_number):
    if not BEARER_TOKEN:
        get_bearer_token()

    # Search for the card based on set abbreviation and card number
    search_url = f'https://api.tcgplayer.com/catalog/products?categoryId=1&productLineName=Magic&setName={set_abbreviation}&productNumber={card_number}'
    headers = {
        'Authorization': f'Bearer {BEARER_TOKEN}',
        'Accept': 'application/json',
    }
    search_response = requests.get(search_url, headers=headers).json()
    product_ids = [product['productId'] for product in search_response['results']]

    if not product_ids:
        return []

    # Get pricing information for the found product IDs
    pricing_url = f'https://api.tcgplayer.com/pricing/product/{",".join(map(str, product_ids))}'
    pricing_response = requests.get(pricing_url, headers=headers).json()

    prices = []
    for price in pricing_response['results']:
        market_price = price.get('marketPrice')
        if market_price:
            prices.append(market_price)
    return sorted(prices)

def display_prices(prices):
    if not prices:
        messagebox.showinfo("No Results", "No prices found for the specified card.")
        return

    prices_text = "\n".join(
        f"${prices[i]:.2f} - ${prices[i + 1]:.2f} - ${prices[i + 2]:.2f}" 
        for i in range(0, len(prices) - 2, 3)
    )
    if len(prices) % 3 == 1:
        prices_text += f"\n${prices[-1]:.2f}"
    elif len(prices) % 3 == 2:
        prices_text += f"\n${prices[-2]:.2f} - ${prices[-1]:.2f}"

    messagebox.showinfo("Card Prices", prices_text)

def main():
    root = tk.Tk()
    root.withdraw()  # Hide the root window

    set_abbreviation = simpledialog.askstring("Input", "Enter the Magic: The Gathering set abbreviation:")
    card_number = simpledialog.askstring("Input", "Enter the card number:")

    if set_abbreviation and card_number:
        prices = get_card_prices(set_abbreviation, card_number)
        display_prices(prices)

if __name__ == '__main__':
    main()
```

### Steps to Upload to Google Drive

1. **Save the Script**:
   - Open a text editor (e.g., Notepad, VS Code).
   - Copy the entire script above.
   - Save it as `mtg_price_scraper_with_api.py`.

2. **Upload to Google Drive**:
   - Open your web browser and go to [Google Drive](https://drive.google.com).
   - Log in with your Google account.
   - Click the "+ New" button on the left side.
   - Select "File upload" from the dropdown menu.
   - Navigate to where you saved `mtg_price_scraper_with_api.py` and select it.
   - The file will upload to your Google Drive.

This way, you can easily upload the script to your Google Drive for safekeeping and access from any device.
